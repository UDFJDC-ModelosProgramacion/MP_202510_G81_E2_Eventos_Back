{
	"info": {
		"_postman_id": "d917c018-1686-45cb-bc2c-c842f9d078d8",
		"name": "Purchase",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45695750",
		"_collection_link": "https://alan-1390234.postman.co/workspace/Alan's-Workspace~6aae442a-95db-4b89-8c0a-f0f8576a3123/collection/45695750-d917c018-1686-45cb-bc2c-c842f9d078d8?action=share&source=collection_link&creator=45695750"
	},
	"item": [
		{
			"name": "Crea una compra",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();",
							"pm.globals.set(\"purchase_id_1\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"remainingSeats\": 1\n}\n    ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/purchases",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"purchases"
					]
				}
			},
			"response": [
				{
					"name": "New Request",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"remainingSeats\": 3,\n  \"amount\": 120.5,\n  \"purchaseDate\": \"2025-06-10T15:30:00\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/purchases",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"purchases"
							]
						}
					},
					"_postman_previewlanguage": "",
					"header": [],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": ""
				}
			]
		},
		{
			"name": "Obtener todas las compras",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Número de compras mayor a 0', function () {",
							"   const data = pm.response.json();",
							"   pm.expect(data.length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"remainingSeats\": 3\n}\n    "
				},
				"url": {
					"raw": "{{baseUrl}}/purchases",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"purchases"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una compra por ID válido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/purchases/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"purchases",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una compra con ID inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Mensaje de error esperado\", function () {",
							"   const data = pm.response.json();",
							"   pm.expect(data.detail).to.eql(\"Purchase not found with id 9\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/purchases/9",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"purchases",
						"9"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar una compra",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Se actualizó correctamente\", function () {",
							"    const data = pm.response.json();",
							"    pm.expect(data.remainingSeats).to.eql(5);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"remainingSeats\": 5\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/purchases/{{purchase_id_1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"purchases",
						"{{purchase_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar una compra con número de asientos inválido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Mensaje de error correcto\", function () {",
							"  pm.response.to.have.status(400);",
							"  pm.expect(pm.response.text()).to.include(\"The number of purchased seats must be greater than 0\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"remainingSeats\": -5,\n  \"amount\": 120.0,\n  \"purchaseDate\": \"2025-06-10T00:00:00\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/purchases/{{purchase_id_1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"purchases",
						"{{purchase_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar una compra inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Mensaje de error esperado\", function () {",
							"    const data = pm.response.json();",
							"    pm.expect(data.detail).to.eql(\"Purchase not found\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"remainingSeats\": 2\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/purchases/99",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"purchases",
						"99"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar purchase",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"remainingSeats\": 5,\n  \"amount\": 20000,\n  \"purchaseDate\": \"2025-06-10T10:00:00\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/purchases/{{purchase_id_1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"purchases",
						"{{purchase_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar purchase que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"    var data = pm.response.json();",
							"    pm.expect(data.apierror.message).to.eql(\"Purchase not found\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/purchases/9",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"purchases",
						"9"
					]
				}
			},
			"response": []
		}
	]
}